* 包管理器
#+begin_src emacs-lisp
;设定软件源
(use-package package
  :config
  (add-to-list 'package-archives '("melepa" . "https://melpa.org/packages/")))
#+end_src
* UI显示 
** 基本UI显示
#+begin_src emacs-lisp
(tool-bar-mode -1)

(scroll-bar-mode -1)

(global-display-line-numbers-mode)

;在Mode Line上显示列号
(column-number-mode t)

;设置字体
(set-language-environment "UTF-8")

(set-face-attribute 'default nil :font "iosevka-14:weight=normal")

(dolist (charset '(kana han cjk-misc bopomofo))
  (set-fontset-font (frame-parameter nil 'font)
		    charset
		    (font-spec :family "Simsun" :size 34)))

;更改光标样式
(setq-default cursor-type 'bar)

;关闭启动帮助画面
(setq inhibit-splash-screen 1)

;高亮当前行
(global-hl-line-mode 1)

;滚动条优化
(use-package good-scroll
  :ensure t
  :if window-system
  :init
  (good-scroll-mode))


;多级彩虹括号
(use-package rainbow-delimiters
  :ensure t
  :hook
  (prog-mode . rainbow-delimiters-mode))

;显示列号
(use-package simple
  :ensure nil
  :hook
  (after-init . size-indication-mode)
  :init
  (progn
    (setq column-number-mode t)))

#+end_src

** emacs主题
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1)
  :custom-face
  (mode-line ((t (:height 0.9))))
  (mode-line-inactive ((t (:height 0.9)))))

;安装需要的图标和字体
;激活后安装字体可以 M-x all-the-icons-install-fonts
;然后在操作系统中把下载的字体安装到系统字体
(use-package all-the-icons
  :ensure t)

;同上 M-x nerd-icons-install-fonts
;然后在操作系统中把下载的字体安装到系统字体
(use-package nerd-icons-ivy-rich
  :ensure t
  :init
  (nerd-icons-ivy-rich-mode 1)
  (ivy-rich-mode 1)
  :config
  (setq nerd-icons-ivy-rich-icon t)
  (setq nerd-icons-ivy-rich-color-icon t)
  (setq nerd-icons-ivy-rich-icon-size 1.0)
  (setq nerd-icons-ivy-rich-project t)
  (setq nerd-icons-ivy-rich-field-width 80)
  (setq ihibit-compacting-font-caches t))

;项目管理相关
(use-package projectile
  :ensure t
  :bind
  (("C-c p" . projectile-command-map))
  :config
  (setq projectile-mode-line "Projectile")
  (setq projectile-track-known-projects-automatically nil))

(use-package counsel-projectile
  :ensure t
  :after (projectile)
  :init (counsel-projectile))



;启动界面
(use-package dashboard
  :ensure t
  :config
  (setq dashboard-banner-logo-title "Welcome to Emacs!")
  (setq dashboard-projects-backend 'projectile)
  (setq dashboard-display-icons-p t)	
  (setq dashboard-icon-type 'nerd-icons)
  (setq dashboard-startup-banner 'official)
  ;; (setq dashboard-items '((recents . 5)
  ;; 			  (bookmarks . 5)
  ;; 			  (projects . 5))) 
  (dashboard-setup-startup-hook))


;使用doom系列主题					
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)
  (load-theme 'doom-one t)
  (doom-themes-visual-bell-config)
  (doom-themes-neotree-config)
  (setq doom-themes-treemacs-theme "doom-atom")
  (doom-themes-treemacs-config)
  (doom-themes-org-config))

#+end_src

** minibuffer 
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :config
  (vertico-mode t))


(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless)))

(use-package marginalia
  :ensure t
  :config
  (marginalia-mode t))

(use-package embark
  :ensure t
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (add-to-list 'display-buffer-alist
	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		 nil
		 (window-parameters (mode-line-format . none))))
  :bind
  (("C-." . embark-act)
   ("C-;" . embark-dwim)
   ("C-h B" . embark-bindings)))

(use-package consult
  :ensure t
  :config
  (global-set-key (kbd "C-s") 'consult-line)
  (global-set-key (kbd "M-s") 'consult-imenu))

(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** org-mode显示
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

;org-mode文字缩进
(setq org-startup-indented t)
#+end_src
* 交互逻辑
** 一般交互行为
#+begin_src emacs-lisp
;emacs前询问是否确认
(setq confirm-kill-emacs #'yes-or-no-p)

;自动补全括号
(electric-pair-mode t)

;编程模式下，光标在一个括号时高亮另外一个
(add-hook 'prog-mode-hook #'show-paren-mode)

;当另一个程序更改文件后，Emacs及时刷新
(global-auto-revert-mode t)

;选中文本时输入文本会替换文本
(delete-selection-mode t)

;关闭文件自动备份
(setq make-backup-files nil)
(setq auto-save-mode nil)

;编程模式下，可折叠代码块
(add-hook 'prog-mode-hook #'hs-minor-mode)

;win10的C-SPC和系统输入法冲突，切换为M-SPC
(global-unset-key (kbd "C-SPC"))
(global-set-key (kbd "C-x SPC") 'set-mark-command)

;取消系统铃声
(setq ring-bell-funciton 'ignore)

;设定启动时不显示警告信息
(setq inhibit-startup-message t)

;增强C-a和C-e快捷键
(use-package mwim
  :ensure t
  :bind
  (("C-a" . mwim-beginning-of-code-or-line)
   ("C-e" . mwim-end-of-code-or-line)))

;增加重启emacs命令
(use-package restart-emacs
  :ensure t)

;打开历史文件
(use-package savehist
  :ensure nil
  :hook
  (after-init . savehist-mode)
  :init
  (setq enable-recursive-minibuffers t
	history-length 1000
	savehist-additional-variables '(mark-ring
					global-mark-ring
					search-ring
					regexp-search-ring
					extended-command-history)
	savehist-autosave-interval 300))

;保存上次光标所在位置
(use-package saveplace
  :ensure nil
  :hook
  (after-init . save-place-mode))

;优化undo操作
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode 1)
  :config
  (setq undo-tree-auto-save-history nil)
  ;(setq evil-undo-system 'undo-tree)
)

#+end_src

** 自动补全
#+begin_src emacs-lisp 
(use-package company
  :ensure t
  :init
  (global-company-mode)
  :config
  (setq company-minimum-prefix-length 1)
  (setq company-tooltip-align-annotations t)
  (setq company-idle-delay 0.0)
  (setq company-show-numbers t)
  (setq company-selection-warp-around t)
  (setq company-transformers '(company-sort-by-occurrence)))
  

(use-package company-box
  :ensure t
  :if window-system
  :hook
  (company-mode . company-box-mode))

(use-package lsp-mode
  :ensure t
  :hook
  (prog-mode . lsp-deferred)
  :custom
  (lsp-keymap-prefix "C-c l")
  (lsp-prefer-capf t)
  (lsp-auto-guess-root t)
  (lsp-keep-workspace-alive nil)
  :bind
  (:map lsp-mode-map
	("C-c f" . lsp-format-region)
	("C-c d" . lsp-describe-thing-at-point)
	("C-c a" . lsp-execute-code-action)
	("C-c r" . lsp-rename)))
#+end_src

** 搜索功能
** M-x命令增强
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :bind
  (("M-x" . counsel-M-x)
   ("C-x C-f" . counsel-find-file)
   ("C-c c t" . counsel-load-theme)
   ("C-c c b" . counsel-bookmark)
   ("C-c c r" . counsel-rg)
   ("C-c c f" . counsel-fzf)
   ("C-c c g" . counsel-git)))
#+end_src

** Evil模式
#+begin_src emacs-lisp
;; (use-package evil
;;   :ensure t
;;   :init
;;   (setq evil-want-keybinding nil)
;;   (setq evil-want-C-u-scroll t)
;;   (evil-mode)
;;   (with-eval-after-load 'evil-maps
;;     (define-key evil-motion-state-map (kbd "RET") nil)))

;; ;evil-mode教程
;; (use-package evil-tutor-sc
;;   :ensure t)

;; ;evil社区定义快捷键
;; (use-package evil-collection
;;   :ensure t
;;   :demand t
;;   :config
;;   (setq evil-collection-mode-list (remove 'lispy evil-collection-mode-list))
;;   (evil-collection-init)
;;   (cl-loop for (mode . state) in
;;            '((org-agenda-mode . normal)
;;              (Custom-mode . emacs)
;;              (makey-key-mode . motion))
;;            do (evil-set-initial-state mode state)))

;; (use-package evil-surround
;;   :ensure t
;;   :init
;;   (global-evil-surround-mode 1))

;; (use-package evil-nerd-commenter
;;   :ensure t
;;   :init
;;   (define-key evil-normal-state-map (kbd ",/") 'evilnc-comment-or-uncomment-lines)
;;   (define-key evil-visual-state-map (kbd ",/") 'evilnc-comment-or-uncomment-lines))

;; (use-package evil-snipe
;;   :ensure t
;;   :diminish
;;   :init
;;   (evil-snipe-mode +1)
;;   (evil-snipe-override-mode +1))

;; (use-package iedit
;;   :ensure t
;;   :init
;;   (setq iedit-toggle-key-default nil)
;;   :bind
;;   (:map iedit-mode-keymap
;;         ("M-h" . iedit-restrict-function)
;;         ("M-i" . iedit-restrict-current-line)))

;; (use-package evil-multiedit
;;   :ensure t
;;   :commands
;;   (evil-multiedit-default-keybinds)
;;   :init
;;   (evil-multiedit-default-keybinds))
#+end_src

** 窗口管理
#+begin_src emacs-lisp
(use-package window-numbering
  :ensure t
  :init
  :hook
  (after-init . window-numbering-mode))
#+end_src

** 日程
#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "STARTED(s)" "|" "Done(d!/!)")
              (sequence "WATTING(w@/!)" "SOMEDAY(s)" "|" "CANCELLED(c@/!)" "MEETING(m)" "PHONE(p)"))))

;org-agenda设置
(global-set-key (kbd "C-c a") 'org-agenda)
(setq org-agenda-files '("~/.emacs.d/gtd.org"))
(setq org-agenda-span 'day)

;; (setq org-capture-templates
  ;; '(("t" "Todo" entry (file+headline "~/.emacs.d/gtd.org" "Workspace")
     ;; "* TODO [#B] %?\n %i\n %U"
     ;; :empty-lines 1)))
;; (global-set-key (kbd "C-c r") 'org-capture)

;; (setq org-agenda-custom-commands
  ;; '(("c" "Important and priority things"
    ;; ((tags-todo "+PRIORITY=\"A\"")))))
#+end_src

* Org-Mode增强
** 纯org的博客设置
#+begin_src emacs-lisp
;; the httpd server
(use-package simple-httpd
  :ensure t)

;; load the publish system
(use-package ox-publish
  :after ox
  :config
  ;; Customize the HTML output
  (setq org-publish-project-alist
	`(("org-post"
	       :recursive t
	       :base-directory "~/blog/org"
	       :base-extension "org"
	       :publishing-directory "~/blog/public/"
	       :publishing-funciton org-html-publish-to-html
	       :head-line-levels 4
	       :html-html5-fancy t
	       :auto-preamble t
	       :style "<link rel='stylesheet' type='text/css' href='css/style.css' />"
	       :style-include-default nil)
	 
	 ("org-static"
	       :base-directory "~/blog/org/"
	       :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
	       :publishing-directory "~/blog/public/"
	       :recursive t
	       :publishing-function org-publish-attachment)
	 ("Marshall's Tip"
	       :components ("org-post" "org-static")))
	))



;; ; Generate the site output
;; (org-publish-all t)

;; (message "ox-pulish build complete!")
#+end_src

** Latex和PDF
#+begin_src emacs-lisp

;机器上需安装texlive且latex命令加入了环境变量
(require 'ox-latex)
(setq org-latex-compiler "xelatex")
(setq org-image-actrual-width nil)
(setq org-latex-pdf-process
      '("latexmk -f -pdf -xelatex -interaction=nonstopmode -output-directory=%o %f"))
(add-to-list 'org-latex-classes
	     '("ctexart"
	       "\\documentclass[UTF8,a4paper]{ctexart}
            \\usepackage[a4paper, left=25mm, right=20mm, top=20mm, bottom=25mm]{geometry}
            \\usepackage{fancyhdr}
            \\fancypagestyle{plain} {
               \\fancyhf{}
               \\fancyfoot[C]{\\thepage}
               \\renewcommand{\\headrule}{\\hrule height 2pt \\vspace{1mm} \\hrule height 1pt}
               \\renewcommand{\\footrulewidth}{1pt}
               \\fancyfoot[L]{}
               \\fancyfoot[R]{}
               \\fancyhead[R]{\\leftmark}
            }
            \\pagestyle{plain}"
           ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(setq org-latex-default-class "ctexart")



#+end_src

* 编程环境
** 项目管理
#+begin_src emacs-lisp


(use-package treemacs
  :ensure t
  :defer t
  :config
  (treemacs-tag-follow-mode)
  :bind
  (:map global-map
	("M-0" . treemacs-select-window)
	("C-x t 1" . treemacs-delete-other-windows)
	("C-x t t" . treemacs)
	("C-x t B" . treemacs-bookmark)
	("C-x t M-t" . treemacs-find-tag))
    (:map treemacs-mode-map
	("/" . treemacs-advanced-helpful-hydra)))

(use-package treemacs-projectile
  :ensure t
  :after (treemacs projectile))

(use-package lsp-treemacs
  :ensure t
  :after (treemacs lsp))

;git管理工具; windows 下非常慢
;; (use-package magit
;;   :ensure t)

#+end_src

** python相关
#+begin_src emacs-lisp
(use-package python
  :defer t
  :mode
  ("\\.py\\'" . python-mode)
  :interpreter
  ("python3" . python-mode))
#+end_src



